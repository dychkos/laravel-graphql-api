"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    me: User @auth @guard,

    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    greet(
        "Basic greeting"
        name: String!
    ): String

    "Notes"
    notes: [Note!] @paginate(defaultCount: 10)

    note (
        id: ID
    ): Note @first
}

type Mutation {
    "Users"
    login(email: String!, password: String!): AuthToken!
    logout: User @guard
    register(input: CreateUserInput! @spread): User!
    createUser(input: CreateUserInput! @spread): User!


    "Notes"
    createNote(input: CreateNoteInput @spread): Note! @guard
    updateNote(input: UpdateNoteInput @spread): Note @guard
    deleteNote(id: ID!): Note @guard
}

input CreateUserInput {
    name: String!
    email: String! @rules(apply: ["required", "unique:users,email"]),
    password: String! @rules(apply: ["required", "min:8", "max:512", "confirmed"])
    password_confirmation: String! @rules(apply: ["required", "min:8", "max:512"])
}

input CreateNoteInput {
    content: String! @rules(apply: ["required", "min:3", "max:1000"])
    images: [Upload]
}

input UpdateNoteInput {
    id: ID!
    content: String! @rules(apply: ["required", "min:3", "max:1000"])
}


"Account of a person who utilizes this application."
type User {
    id: ID!

    name: String!

    email: String!

    notes: [Note]

    email_verified_at: DateTime

    created_at: DateTime!

    updated_at: DateTime!
}

type AuthToken {
    accessToken: String!
}

type Note {
    id: ID!

    content: String!

    user: User!

    images: [Image]

    created_at: DateTime!

    updated_at: DateTime!
}

type Image {
    path: String!
    name: String!
}


